{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["deviceToken","localStorage","getItem","array","Uint8Array","window","crypto","getRandomValues","Array","prototype","map","call","x","toString","slice","join","setItem","App","className","onClick","Wyre","env","auth","type","secretKey","operation","destCurrency","dest","onExit","error","console","log","onSuccess","open","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2LAEIA,EAAcC,aAAaC,QAAQ,iBACvC,IAAKF,EAAa,CACd,IAAIG,EAAQ,IAAIC,WAAW,IAC3BC,OAAOC,OAAOC,gBAAgBJ,GAC9BH,EAAcQ,MAAMC,UAAUC,IACzBC,KAAKR,GAAO,SAAAS,GAAC,OAAK,KAAOA,EAAEC,SAAS,KAAKC,OAAO,MAChDC,KAAK,IACVd,aAAae,QAAQ,gBAAiBhB,GAgF3BiB,MA7Ef,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQC,QAAS,WACC,IAAId,OAAOe,KAAK,CAC9BC,IAAK,OACLC,KAAM,CACFC,KAAM,YACNC,UAAWxB,GAEfyB,UAAW,CACPF,KAAM,SACNG,aAAc,MACdC,KAAM,uDAEVC,OAAQ,SAAUC,GACD,MAATA,EACAC,QAAQD,MAAMA,GAEdC,QAAQC,IAAI,YAEpBC,UAAW,WACPF,QAAQC,IAAI,eAGVE,QAtBV,gFAwBA,uBACA,wBAAQd,QAAS,WACC,IAAId,OAAOe,KAAK,CAC9BC,IAAK,OACLC,KAAM,CACFC,KAAM,YACNC,UAAWxB,GAEfyB,UAAW,CACPF,KAAM,UAEVK,OAAQ,SAAUC,GACD,MAATA,EACAC,QAAQD,MAAMA,GAEdC,QAAQC,IAAI,YAEpBC,UAAW,WACPF,QAAQC,IAAI,eAGVE,QApBV,iFAsBA,uBACA,wBAAQd,QAAS,WACC,IAAId,OAAOe,KAAK,CAC9BC,IAAK,OACLC,KAAM,CACFC,KAAM,YACNC,UAAWxB,GAEfyB,UAAW,CACPF,KAAM,QAEVK,OAAQ,SAAUC,GACD,MAATA,EACAC,QAAQD,MAAMA,GAEdC,QAAQC,IAAI,YAEpBC,UAAW,WACPF,QAAQC,IAAI,eAGVE,QApBV,+DCnDSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.ffe929d2.chunk.js","sourcesContent":["import './App.css';\n\nlet deviceToken = localStorage.getItem(\"DEVICE_TOKEN2\");\nif (!deviceToken) {\n    let array = new Uint8Array(25);\n    window.crypto.getRandomValues(array);\n    deviceToken = Array.prototype.map\n        .call(array, x => (\"00\" + x.toString(16)).slice(-2))\n        .join(\"\");\n    localStorage.setItem(\"DEVICE_TOKEN2\", deviceToken);\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <button onClick={() => {\n        const handler = new window.Wyre({\n          env: \"test\",\n          auth: {\n              type: \"secretKey\",\n              secretKey: deviceToken\n          },\n          operation: {\n              type: \"onramp\",\n              destCurrency: \"ETH\",\n              dest: \"ethereum:0xBB9bc244D798123fDe783fCc1C72d3Bb8C189413\",\n          },\n          onExit: function (error) {\n              if (error != null)\n                  console.error(error)\n              else\n                  console.log(\"exited!\")\n          },\n          onSuccess: function () {\n              console.log(\"success!\")\n          }\n        });\n        handler.open();\n      }}>Operation onramp to ETH 0xBB9bc244D798123fDe783fCc1C72d3Bb8C189413</button>\n      <br />\n      <button onClick={() => {\n        const handler = new window.Wyre({\n          env: \"test\",\n          auth: {\n              type: \"secretKey\",\n              secretKey: deviceToken\n          },\n          operation: {\n              type: \"onramp\",\n          },\n          onExit: function (error) {\n              if (error != null)\n                  console.error(error)\n              else\n                  console.log(\"exited!\")\n          },\n          onSuccess: function () {\n              console.log(\"success!\")\n          }\n        });\n        handler.open();\n      }}>Operation onramp without destination specicied (form not prefilled)</button>\n      <br />\n      <button onClick={() => {\n        const handler = new window.Wyre({\n          env: \"test\",\n          auth: {\n              type: \"secretKey\",\n              secretKey: deviceToken\n          },\n          operation: {\n              type: \"none\",\n          },\n          onExit: function (error) {\n              if (error != null)\n                  console.error(error)\n              else\n                  console.log(\"exited!\")\n          },\n          onSuccess: function () {\n              console.log(\"success!\")\n          }\n        });\n        handler.open();\n      }}>Open widget with operation none (form broken)</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}